### Section 1: Enhance Monitoring Capabilities

Based on WhatsUp Gold's "Monitoring" section (Pages 10-14 of the provided PDF [cite: 1]), we need to implement robust performance and active monitoring for our NMS.

**1.1. Performance Monitor Implementation (Inspired by WhatsUp Gold Page 10, 11 [cite: 1]):**

* **Goal:** Periodically collect and store performance data (CPU, Memory, Disk, Network Interface) from onboard CBSs and network devices using SNMP. Visualize this data on the dashboard.
* **Specific Request:**
    * **SNMP Data Collection:** Provide Python code using a suitable SNMP library (e.g., `pysnmp` or `snmp_component`) to query a target device for its CPU utilization, memory usage, and network interface traffic. Assume we have the target IP and SNMP community string.
    * **Database Integration:** Enhance our `SensorData` model or create a new model to store this time-series performance data. Include fields for `timestamp`, `vessel_id`, `cbs_id`, `metric_type` (e.g., 'CPU', 'Memory', 'Network_In', 'Network_Out'), and `value`.
    * **API Endpoint:** Suggest a Flask API endpoint (e.g., `/api/performance_data`) where a future on-ship agent could send this collected SNMP data.
    * **Dashboard Visualization Placeholder:** Advise on how to display this data on the web dashboard. Suggest using `Chart.js` for line graphs, showing current and historical trends (like the CPU Utilization graph on Page 11 [cite: 1]). Provide a basic HTML template snippet and Flask route to fetch the data for the chart.

**1.2. Active Monitor Implementation (Inspired by WhatsUp Gold Page 10, 13 [cite: 1]):**

* **Goal:** Continuously check the Up/Down status of network devices and critical services (e.g., web server, database port) on CBSs.
* **Specific Request:**
    * **Ping Monitoring:** Provide Python code to perform periodic `ping` checks to a list of configured IP addresses.
    * **Service Port Monitoring:** Provide Python code to check if a specific TCP port on a given IP address is open and responsive (e.g., port 80 for HTTP, port 5432 for PostgreSQL).
    * **Status Storage:** Update our `CBSAsset` model or create a new `DeviceStatus` model to store the latest Up/Down status, including a `timestamp`.
    * **Dashboard Integration:** Modify the existing dashboard to clearly show the real-time Up/Down status of all monitored devices (similar to "Device List" on Page 7 [cite: 1]), perhaps with color-coded indicators.
    * **Alert Triggering:** Integrate this with our existing alert mechanism: if a device or service goes 'Down', log an `Alert` and a `SecurityLog` entry.